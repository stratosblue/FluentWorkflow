// <Auto-Generated/>

using System.ComponentModel;
using FluentWorkflow;
using FluentWorkflow.Interface;
using TemplateNamespace.Message;

namespace TemplateNamespace.Handler;

/// <summary>
/// <see cref="TemplateWorkflow"/> 的启动请求处理器
/// </summary>
/// <typeparam name="TWorkflow">用以启动的工作流程具体实现（<see cref="TemplateWorkflow"/> 或其派生类型）</typeparam>
[EditorBrowsable(EditorBrowsableState.Never)]
public partial class TemplateWorkflowStartRequestHandler<TWorkflow>
    : WorkflowStartRequestHandler<TWorkflow, TemplateWorkflowContext, TemplateWorkflowStartRequestMessage, ITemplateWorkflow>
    , ITemplateWorkflow
    where TWorkflow : TemplateWorkflow
{
    /// <inheritdoc cref="IServiceProvider"/>
    public IServiceProvider ServiceProvider { get; }

    /// <inheritdoc cref="TemplateWorkflowStartRequestHandler{TWorkflow}"/>
    public TemplateWorkflowStartRequestHandler(IWorkflowBuilder<TWorkflow> workflowBuilder, IWorkflowScheduler<TWorkflow> workflowScheduler, IServiceProvider serviceProvider) : base(workflowBuilder, workflowScheduler)
    {
        ServiceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
    }
}
