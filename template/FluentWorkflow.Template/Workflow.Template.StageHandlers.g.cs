// <Auto-Generated/>

using System.ComponentModel;
using System.Diagnostics;
using FluentWorkflow;
using FluentWorkflow.Extensions;
using FluentWorkflow.Interface;
using TemplateNamespace.Template.Message;

namespace TemplateNamespace.Template.Handler;

/// <summary>
/// 阶段完成器
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public interface ITemplateWorkflowStageFinalizer
    : IWorkflowStageFinalizer, ITemplateWorkflow
{
}

/// <summary>
/// 阶段 Stage1CAUK 完成器
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public interface ITemplateWorkflowStage1CAUKStageFinalizer : ITemplateWorkflowStageFinalizer
{
}

/// <summary>
/// 阶段 Stage2BPTG 完成器
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public interface ITemplateWorkflowStage2BPTGStageFinalizer : ITemplateWorkflowStageFinalizer
{
}

/// <summary>
/// 阶段 Stage3AWBN 完成器
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public interface ITemplateWorkflowStage3AWBNStageFinalizer : ITemplateWorkflowStageFinalizer
{
}

/// <summary>
/// 阶段处理器基类
/// </summary>
/// <typeparam name="TStage"></typeparam>
/// <typeparam name="TStageMessage"></typeparam>
/// <typeparam name="TStageCompletedMessage"></typeparam>
[EditorBrowsable(EditorBrowsableState.Never)]
public abstract partial class TemplateWorkflowStageHandler<TStage, TStageMessage, TStageCompletedMessage>
    : WorkflowStageHandler<TStage, TemplateWorkflowContext, TStageMessage, TStageCompletedMessage, ITemplateWorkflow>
    , ITemplateWorkflow
    , IWorkflowStageHandler<TStageMessage>
    , ITemplateWorkflowStageFinalizer
    , ICurrentStage
    where TStage : ITemplateWorkflow
    where TStageMessage : TemplateWorkflowStageMessageBase, TStage, IEventNameDeclaration
    where TStageCompletedMessage : TemplateWorkflowStageCompletedMessageBase, TStage, IEventNameDeclaration
{
    /// <inheritdoc cref="TemplateWorkflowStageHandler{TStage, TStageMessage, TStageCompletedMessage}"/>
    public TemplateWorkflowStageHandler(IServiceProvider serviceProvider) : base(serviceProvider)
    {
    }

    /// <inheritdoc/>
    protected override Task StageHandleFailedAsync(TStageMessage stageMessage, Exception exception, CancellationToken cancellationToken)
    {
        stageMessage.Context.SetFailureMessage(exception.Message);
        stageMessage.Context.SetFailureStackTrace(exception.StackTrace ?? new StackTrace(1, fNeedFileInfo: true).ToString());

        return ((IWorkflowStageFinalizer)this).FailAsync(stageMessage.Context, cancellationToken);
    }

    /// <summary>
    /// 子工作流程等待结束（处理合并上下文到主流程上下文）
    /// </summary>
    /// <param name="context"></param>
    /// <param name="childWorkflowContexts"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    protected virtual Task OnAwaitFinishedAsync(TemplateWorkflowContext context, IReadOnlyDictionary<string, IWorkflowContext?> childWorkflowContexts, CancellationToken cancellationToken)
    {
        return Task.CompletedTask;
    }

    #region IWorkflowStageFinalizer

    /// <inheritdoc/>
    async Task IWorkflowStageFinalizer.AwaitFinishedAsync(IWorkflowContext context, IReadOnlyDictionary<string, IWorkflowContext?> childWorkflowContexts, CancellationToken cancellationToken)
    {
        var typedContext = new TemplateWorkflowContext(context.GetSnapshot());
        try
        {
            await OnAwaitFinishedAsync(typedContext, childWorkflowContexts, cancellationToken);
        }
        finally
        {
            //在完成等待时出现异常也需要将修改反应回原上下文
            //将修改反应回原上下文
            context.ApplyChanges(typedContext);
        }
    }

    /// <inheritdoc/>
    async Task IWorkflowStageFinalizer.CompleteAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {
        ThrowIfStageNotMatch(context);

        var typedContext = new TemplateWorkflowContext(context.GetSnapshot());

        //HACK 包装 OnProcessSuccessAsync 的用户异常，保证消息正确发送？
        await OnProcessSuccessAsync(typedContext, cancellationToken);
        var stageCompletedMessage = CreateCompletedMessage(typedContext);
        await MessageDispatcher.PublishAsync(stageCompletedMessage, cancellationToken);
    }

    /// <inheritdoc/>
    async Task IWorkflowStageFinalizer.FailAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {
        ThrowIfStageNotMatch(context);

        var typedContext = new TemplateWorkflowContext(context.GetSnapshot());

        //HACK 包装 OnProcessFailedAsync 的用户异常，保证消息正确发送？
        await OnProcessFailedAsync(typedContext, cancellationToken);

        var failureMessage = context.TryGetFailureMessage(out var failureMessageValue) ? failureMessageValue : "Unknown error";
        var failureStackTrace = context.TryGetFailureStackTrace(out var failureStackTraceValue) ? failureStackTraceValue : null;

        var workflowFailureMessage = new TemplateWorkflowFailureMessage(typedContext, failureMessage, failureStackTrace);
        await MessageDispatcher.PublishAsync(workflowFailureMessage, cancellationToken);
    }

    #endregion IWorkflowStageFinalizer
}

/// <summary>
/// 阶段 <see cref="TemplateWorkflowStages.Stage1CAUK"/> 处理器基类<br/>
/// 工作流程阶段顺序：<br/><see cref="TemplateWorkflowStages.Stage1CAUK"/> -><br/> <see cref="TemplateWorkflowStages.Stage2BPTG"/> -><br/> <see cref="TemplateWorkflowStages.Stage3AWBN"/>
/// </summary>
public abstract partial class TemplateWorkflowStage1CAUKStageHandlerBase
    : TemplateWorkflowStageHandler<ITemplateWorkflowStage1CAUKStage, TemplateWorkflowStage1CAUKStageMessage, TemplateWorkflowStage1CAUKStageCompletedMessage>
    , ITemplateWorkflowStage1CAUKStageFinalizer
{
    /// <inheritdoc/>
    public sealed override string Stage { get; } = TemplateWorkflowStages.Stage1CAUK;

    /// <inheritdoc cref="TemplateWorkflowStage1CAUKStageHandlerBase"/>
    public TemplateWorkflowStage1CAUKStageHandlerBase(IServiceProvider serviceProvider) : base(serviceProvider)
    {
    }

    /// <inheritdoc/>
    protected override TemplateWorkflowStage1CAUKStageCompletedMessage CreateCompletedMessage(TemplateWorkflowContext context)
    {
        return new TemplateWorkflowStage1CAUKStageCompletedMessage(context);
    }
}

/// <summary>
/// 阶段 <see cref="TemplateWorkflowStages.Stage2BPTG"/> 处理器基类<br/>
/// 工作流程阶段顺序：<br/><see cref="TemplateWorkflowStages.Stage1CAUK"/> -><br/> <see cref="TemplateWorkflowStages.Stage2BPTG"/> -><br/> <see cref="TemplateWorkflowStages.Stage3AWBN"/>
/// </summary>
public abstract partial class TemplateWorkflowStage2BPTGStageHandlerBase
    : TemplateWorkflowStageHandler<ITemplateWorkflowStage2BPTGStage, TemplateWorkflowStage2BPTGStageMessage, TemplateWorkflowStage2BPTGStageCompletedMessage>
    , ITemplateWorkflowStage2BPTGStageFinalizer
{
    /// <inheritdoc/>
    public sealed override string Stage { get; } = TemplateWorkflowStages.Stage2BPTG;

    /// <inheritdoc cref="TemplateWorkflowStage2BPTGStageHandlerBase"/>
    public TemplateWorkflowStage2BPTGStageHandlerBase(IServiceProvider serviceProvider) : base(serviceProvider)
    {
    }

    /// <inheritdoc/>
    protected override TemplateWorkflowStage2BPTGStageCompletedMessage CreateCompletedMessage(TemplateWorkflowContext context)
    {
        return new TemplateWorkflowStage2BPTGStageCompletedMessage(context);
    }
}

/// <summary>
/// 阶段 <see cref="TemplateWorkflowStages.Stage3AWBN"/> 处理器基类<br/>
/// 工作流程阶段顺序：<br/><see cref="TemplateWorkflowStages.Stage1CAUK"/> -><br/> <see cref="TemplateWorkflowStages.Stage2BPTG"/> -><br/> <see cref="TemplateWorkflowStages.Stage3AWBN"/>
/// </summary>
public abstract partial class TemplateWorkflowStage3AWBNStageHandlerBase
    : TemplateWorkflowStageHandler<ITemplateWorkflowStage3AWBNStage, TemplateWorkflowStage3AWBNStageMessage, TemplateWorkflowStage3AWBNStageCompletedMessage>
    , ITemplateWorkflowStage3AWBNStageFinalizer
{
    /// <inheritdoc/>
    public sealed override string Stage { get; } = TemplateWorkflowStages.Stage3AWBN;

    /// <inheritdoc cref="TemplateWorkflowStage3AWBNStageHandlerBase"/>
    public TemplateWorkflowStage3AWBNStageHandlerBase(IServiceProvider serviceProvider) : base(serviceProvider)
    {
    }

    /// <inheritdoc/>
    protected override TemplateWorkflowStage3AWBNStageCompletedMessage CreateCompletedMessage(TemplateWorkflowContext context)
    {
        return new TemplateWorkflowStage3AWBNStageCompletedMessage(context);
    }
}
