// <Auto-Generated/>
using System.ComponentModel;
using FluentWorkflow;
using FluentWorkflow.Interface;
using TemplateNamespace.Message;

namespace TemplateNamespace.Internal;

/// <summary>
/// <see cref="TemplateWorkflow"/> 的状态机驱动器基类
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public abstract partial class TemplateWorkflowStateMachineDriverBase
    : WorkflowStateMachineDriver<TemplateWorkflow, TemplateWorkflowContext, TemplateWorkflowStateMachine, TemplateWorkflowStageCompletedMessageBase, TemplateWorkflowFailureMessage, ITemplateWorkflow>
    , IWorkflowMessageHandler<TemplateWorkflowStageCompletedMessageBase>
    , IWorkflowMessageHandler<TemplateWorkflowFailureMessage>
    , ITemplateWorkflow
{
    /// <inheritdoc cref="TemplateWorkflowStateMachineDriverBase"/>
    protected TemplateWorkflowStateMachineDriverBase(IWorkflowBuilder<TemplateWorkflow> workflowBuilder, IWorkflowMessageDispatcher messageDispatcher, IServiceProvider serviceProvider)
        : base(workflowBuilder, messageDispatcher, serviceProvider)
    {
    }

    /// <inheritdoc/>
    protected override async Task DoInputAsync(TemplateWorkflowStageCompletedMessageBase message, CancellationToken cancellationToken)
    {
        var stateMachine = await RestoreStateMachineAsync(message, cancellationToken);

        if (await stateMachine.SetStageCompletedAsync(message, cancellationToken))
        {
            await InternalDriveAsync(stateMachine, cancellationToken);
        }
    }

    /// <inheritdoc/>
    protected override async Task DoInputAsync(TemplateWorkflowFailureMessage message, CancellationToken cancellationToken)
    {
        var stateMachine = await RestoreStateMachineAsync(message, cancellationToken);

        if (await stateMachine.SetFailedAsync(message, cancellationToken))
        {
            await InternalDriveAsync(stateMachine, cancellationToken);
        }
    }
}

/// <summary>
/// <see cref="TemplateWorkflow"/> 状态机驱动器
/// </summary>
public sealed partial class TemplateWorkflowStateMachineDriver : TemplateWorkflowStateMachineDriverBase
{
    /// <inheritdoc cref="TemplateWorkflowStateMachineDriver"/>
    public TemplateWorkflowStateMachineDriver(IWorkflowBuilder<TemplateWorkflow> workflowBuilder, IWorkflowMessageDispatcher messageDispatcher, IServiceProvider serviceProvider)
        : base(workflowBuilder, messageDispatcher, serviceProvider)
    {
    }
}
