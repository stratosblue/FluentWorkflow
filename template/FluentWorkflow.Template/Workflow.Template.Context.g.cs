// <Auto-Generated/>
using System.ComponentModel;
using System.Text.Json.Serialization;
using FluentWorkflow;
using TemplateNamespace.Template;

namespace TemplateNamespace;

/// <summary>
/// <see cref="TemplateWorkflow"/> 的上下文基类
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public abstract partial class TemplateWorkflowContextBase
    : WorkflowContext, ITemplateWorkflow
{
    /// <summary>
    /// 注释UserId
    /// </summary>
    public virtual int UserId { get => InnerGet<int>(); set => InnerSet(value); }

    /// <summary>
    /// 注释Name
    /// </summary>
    public virtual string? Name { get => InnerGet<string>(); set => InnerSet(value); }

    /// <summary>
    ///
    /// </summary>
    public virtual int? Age { get => InnerGet<int?>(); set => InnerSet(value); }

    /// <summary>
    ///
    /// </summary>
    public virtual string? Address { get => InnerGet<string>(); set => InnerSet(value); }

    /// <summary>
    ///
    /// </summary>
    public virtual TemplateWorkflowTestInfo? TestInfo { get => InnerGet<TemplateWorkflowTestInfo>(); set => InnerSet(value); }

    /// <inheritdoc/>
    protected sealed override string WorkflowName => TemplateWorkflow.WorkflowName;

    /// <inheritdoc cref="TemplateWorkflowContextBase"/>
    protected TemplateWorkflowContextBase(string id) : base(id)
    {
    }

    /// <inheritdoc cref="TemplateWorkflowContextBase"/>
    protected TemplateWorkflowContextBase(IEnumerable<KeyValuePair<string, string>> values) : base(values)
    {
    }

    /// <inheritdoc/>
    protected sealed override string CheckBeforeSetCurrentStage(string stage)
    {
        if (TemplateStages.StageIds.Contains(stage))
        {
            return stage;
        }
        throw new WorkflowInvalidOperationException($"未知的阶段：{stage}");
    }
}

/// <summary>
/// <see cref="TemplateWorkflow"/> 的上下文
/// </summary>
[JsonConverter(typeof(KeyValuesConvertableJsonConverter<TemplateWorkflowContext>))]
public sealed partial class TemplateWorkflowContext
    : TemplateWorkflowContextBase
    , IKeyValuesConvertable<TemplateWorkflowContext>
{
    /// <inheritdoc cref="TemplateWorkflowContext"/>
    public TemplateWorkflowContext() : this(Guid.NewGuid().ToString("N"))
    {
    }

    /// <inheritdoc cref="TemplateWorkflowContext"/>
    public TemplateWorkflowContext(string id) : base(id)
    {
    }

    /// <inheritdoc cref="TemplateWorkflowContext"/>
    public TemplateWorkflowContext(IEnumerable<KeyValuePair<string, string>> values) : base(values)
    {
    }

    /// <inheritdoc/>
    public static TemplateWorkflowContext ConstructFromKeyValues(IEnumerable<KeyValuePair<string, string>> values)
    {
        return new(values);
    }

    /// <inheritdoc/>
    public static IEnumerable<KeyValuePair<string, string>> ConvertToKeyValues(TemplateWorkflowContext instance)
    {
        return instance.GetSnapshot();
    }
}
