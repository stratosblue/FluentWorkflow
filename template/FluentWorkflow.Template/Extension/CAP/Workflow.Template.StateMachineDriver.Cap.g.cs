// <Auto-Generated/>
using DotNetCore.CAP;
using TemplateNamespace.Template.Message;

namespace TemplateNamespace.Template.Internal;

partial class TemplateWorkflowStateMachineDriverBase : ICapSubscribe
{
    /// <summary>
    /// 处理消息 <inheritdoc cref="TemplateFailureMessage.EventName"/>
    /// </summary>
    /// <param name="message"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [CapSubscribe(TemplateFailureMessage.EventName)]
    public virtual Task HandleMessageAsync(TemplateFailureMessage message, CancellationToken cancellationToken)
    {
        return HandleAsync(message, cancellationToken);
    }

    /// <summary>
    /// 处理消息 <inheritdoc cref="StageStage1CAUKCompletedMessage.EventName"/>
    /// </summary>
    /// <param name="message"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [CapSubscribe(StageStage1CAUKCompletedMessage.EventName)]
    public virtual Task HandleMessageAsync(StageStage1CAUKCompletedMessage message, CancellationToken cancellationToken)
    {
        return HandleAsync(message, cancellationToken);
    }

    /// <summary>
    /// 处理消息 <inheritdoc cref="StageStage2BPTGCompletedMessage.EventName"/>
    /// </summary>
    /// <param name="message"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [CapSubscribe(StageStage2BPTGCompletedMessage.EventName)]
    public virtual Task HandleMessageAsync(StageStage2BPTGCompletedMessage message, CancellationToken cancellationToken)
    {
        return HandleAsync(message, cancellationToken);
    }

    /// <summary>
    /// 处理消息 <inheritdoc cref="StageStage3AWBNCompletedMessage.EventName"/>
    /// </summary>
    /// <param name="message"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [CapSubscribe(StageStage3AWBNCompletedMessage.EventName)]
    public virtual Task HandleMessageAsync(StageStage3AWBNCompletedMessage message, CancellationToken cancellationToken)
    {
        return HandleAsync(message, cancellationToken);
    }
}
