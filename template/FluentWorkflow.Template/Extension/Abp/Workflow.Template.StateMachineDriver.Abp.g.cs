// <Auto-Generated/>
using Microsoft.Extensions.DependencyInjection;
using TemplateNamespace.Template.Message;
using Volo.Abp.EventBus.Distributed;
using Volo.Abp.Threading;

namespace TemplateNamespace.Template.Internal;

partial class TemplateWorkflowStateMachineDriverBase
   : IDistributedEventHandler<TemplateFailureMessage>
   , IDistributedEventHandler<StageStage1CAUKCompletedMessage>
   , IDistributedEventHandler<StageStage2BPTGCompletedMessage>
   , IDistributedEventHandler<StageStage3AWBNCompletedMessage>
{
    private ICancellationTokenProvider? _cancellationTokenProvider;

    private ICancellationTokenProvider CancellationTokenProvider => _cancellationTokenProvider ??= ServiceProvider.GetRequiredService<ICancellationTokenProvider>();

    /// <summary>
    /// 处理消息 - <see cref="TemplateFailureMessage"/>
    /// </summary>
    /// <param name="eventData"></param>
    /// <returns></returns>
    public virtual Task HandleEventAsync(TemplateFailureMessage eventData)
    {
        var cancellationToken = CancellationTokenProvider.Token;
        return HandleAsync(eventData, cancellationToken);
    }

    /// <summary>
    /// 处理消息 - <see cref="StageStage1CAUKCompletedMessage"/>
    /// </summary>
    /// <param name="eventData"></param>
    /// <returns></returns>
    public virtual Task HandleEventAsync(StageStage1CAUKCompletedMessage eventData)
    {
        var cancellationToken = CancellationTokenProvider.Token;
        return HandleAsync(eventData, cancellationToken);
    }

    /// <summary>
    /// 处理消息 - <see cref="StageStage2BPTGCompletedMessage"/>
    /// </summary>
    /// <param name="eventData"></param>
    /// <returns></returns>
    public virtual Task HandleEventAsync(StageStage2BPTGCompletedMessage eventData)
    {
        var cancellationToken = CancellationTokenProvider.Token;
        return HandleAsync(eventData, cancellationToken);
    }

    /// <summary>
    /// 处理消息 - <see cref="StageStage3AWBNCompletedMessage"/>
    /// </summary>
    /// <param name="eventData"></param>
    /// <returns></returns>
    public virtual Task HandleEventAsync(StageStage3AWBNCompletedMessage eventData)
    {
        var cancellationToken = CancellationTokenProvider.Token;
        return HandleAsync(eventData, cancellationToken);
    }
}
