// <Auto-Generated/>
using System.ComponentModel;
using FluentWorkflow.Build;
using FluentWorkflow.Diagnostics;
using FluentWorkflow.MessageDispatch;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.Extensions.Logging;
using Volo.Abp.EventBus.Distributed;

namespace FluentWorkflow.GenericExtension.TemplateNamespace;

/// <summary>
/// 基于 abp 的 <inheritdoc cref="IWorkflowMessageDispatcher"/> 默认实现
/// </summary>
internal partial class AbpDistributedWorkflowMessageDispatcher : WorkflowMessageDispatcher
{
    private readonly IDistributedEventBus _distributedEventBus;

    /// <inheritdoc cref="AbpDistributedWorkflowMessageDispatcher"/>
    public AbpDistributedWorkflowMessageDispatcher(IDistributedEventBus distributedEventBus, IWorkflowDiagnosticSource diagnosticSource, ILoggerFactory loggerFactory)
        : base(diagnosticSource, loggerFactory?.CreateLogger("FluentWorkflow.AbpDistributedWorkflowMessageDispatcher"))
    {
        _distributedEventBus = distributedEventBus ?? throw new ArgumentNullException(nameof(distributedEventBus));
    }

    /// <inheritdoc/>
    public override async Task PublishAsync<TMessage>(TMessage message, CancellationToken cancellationToken)
    {
        await base.PublishAsync(message, cancellationToken);
        await _distributedEventBus.PublishAsync(message, true);
    }
}

/// <summary>
/// 
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public static partial class AbpDistributedWorkflowMessageDispatcherDIExtensions
{
    /// <summary>
    /// 使用基于 abp 的 <inheritdoc cref="IWorkflowMessageDispatcher"/>
    /// </summary>
    /// <param name="builder"></param>
    /// <returns></returns>
    public static IFluentWorkflowBuilder UseAbpDistributedWorkflowMessageDispatcher(this IFluentWorkflowBuilder builder)
    {
        builder.Services.Replace(ServiceDescriptor.Scoped<IWorkflowMessageDispatcher, AbpDistributedWorkflowMessageDispatcher>());
        return builder;
    }
}
