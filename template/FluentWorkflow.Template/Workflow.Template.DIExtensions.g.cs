// <Auto-Generated/>
using System.ComponentModel;
using FluentWorkflow;
using FluentWorkflow.Interface;
using Microsoft.Extensions.DependencyInjection.Extensions;
using TemplateNamespace;
using TemplateNamespace.Template;
using TemplateNamespace.Template.Handler;
using TemplateNamespace.Template.Message;
using TemplateNamespace.Template.Internal;

namespace Microsoft.Extensions.DependencyInjection;

/// <summary>
/// 
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public static class TemplateWorkflowDIExtensions
{
    /// <summary>
    /// 添加 <see cref="TemplateWorkflow"/> 的构造器，以支持使用 <see cref="IWorkflowBuilder{TWorkflow}"/> 构造并发起 <see cref="TemplateWorkflow"/>
    /// </summary>
    /// <param name="builder"></param>
    /// <param name="setupAction">配置委托</param>
    /// <returns></returns>
    public static IFluentWorkflowBuilder AddTemplateWorkflow(this IFluentWorkflowBuilder builder, Action<TemplateWorkflowConfiguration>? setupAction = null) => builder.AddTemplateWorkflow<TemplateWorkflow>(setupAction);

    /// <summary>
    /// 添加 <see cref="TemplateWorkflow"/> 的构造器，以支持使用 <see cref="IWorkflowBuilder{TWorkflow}"/> 构造并发起 <see cref="TemplateWorkflow"/>
    /// <br/>使用 <typeparamref name="TWorkflow"/> 替代默认调度实现类型 <see cref="TemplateWorkflow"/>
    /// </summary>
    /// <typeparam name="TWorkflow"></typeparam>
    /// <param name="builder"></param>
    /// <param name="setupAction">配置委托</param>
    /// <returns></returns>
    public static IFluentWorkflowBuilder AddTemplateWorkflow<TWorkflow>(this IFluentWorkflowBuilder builder, Action<TemplateWorkflowConfiguration>? setupAction = null)
        where TWorkflow : TemplateWorkflow
    {
        builder.Services.TryAdd(ServiceDescriptor.Describe(typeof(IWorkflowBuilder<TemplateWorkflow>), typeof(TemplateWorkflowBuilder<TWorkflow>), ServiceLifetime.Scoped));
        builder.Services.TryAdd(ServiceDescriptor.Describe(typeof(IWorkflowBuilder<TWorkflow>), typeof(TemplateWorkflowBuilder<TWorkflow>), ServiceLifetime.Scoped));

        if (setupAction is not null)
        {
            var workflowConfiguration = new TemplateWorkflowConfiguration<TWorkflow>(builder);
            setupAction(workflowConfiguration);
        }

        return builder;
    }

    /// <summary>
    /// 添加 <see cref="TemplateWorkflow"/> 的结果观察器 <see cref="TemplateResultObserver"/>
    /// </summary>
    /// <param name="configuration"></param>
    /// <returns></returns>
    public static TemplateWorkflowConfiguration AddResultObserver(this TemplateWorkflowConfiguration configuration) => configuration.AddResultObserver<TemplateResultObserver>();

    /// <summary>
    /// 添加 <see cref="TemplateWorkflow"/> 的结果观察器，使用 <typeparamref name="TWorkflowResultObserver"/> 替代默认的 <see cref="TemplateResultObserver"/>
    /// </summary>
    /// <param name="configuration"></param>
    /// <returns></returns>
    public static TemplateWorkflowConfiguration AddResultObserver<TWorkflowResultObserver>(this TemplateWorkflowConfiguration configuration)
        where TWorkflowResultObserver : TemplateResultObserverBase
    {
        var builder = configuration.Builder;

        builder.WorkflowBuildStates.AddEventInvokerDescriptor<TemplateWorkflow, TWorkflowResultObserver, TemplateFinishedMessage, ITemplateWorkflow>();

        builder.Services.TryAdd(ServiceDescriptor.Describe(typeof(IWorkflowResultObserver<TemplateWorkflow>), typeof(TWorkflowResultObserver), ServiceLifetime.Scoped));
        builder.Services.TryAdd(ServiceDescriptor.Describe(typeof(TWorkflowResultObserver), typeof(TWorkflowResultObserver), ServiceLifetime.Scoped));
        return configuration;
    }
}
