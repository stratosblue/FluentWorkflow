using System.Text;
using FluentWorkflow.Generator.Model;

namespace FluentWorkflow.Generator.Providers.Workflow;

internal class DeclarationBaseSourceProvider : SourceProvider
{
    #region Private 字段

    private readonly WorkflowDeclaration _declaration;

    private readonly string _usings;

    #endregion Private 字段

    #region Public 构造函数

    public DeclarationBaseSourceProvider(WorkflowDeclaration declaration)
    {
        _declaration = declaration;

        var usingBuilder = new StringBuilder(512);

        usingBuilder.AppendLine($"using System.ComponentModel;");
        usingBuilder.AppendLine($"using FluentWorkflow;");

        _usings = usingBuilder.ToString();
    }

    #endregion Public 构造函数

    #region Public 方法

    public override IEnumerable<GeneratedSource?>? Generate()
    {
        var builder = new StringBuilder(2048);

        builder.AppendLine($@"// <Auto-Generated/>
#nullable enable

#pragma warning disable CS0105

{_usings}
namespace {_declaration.NameSpace};

/// <summary>
/// <see cref=""{_declaration.DeclarationName}""/> 的辅助定义基类
/// </summary>
[EditorBrowsable(EditorBrowsableState.Never)]
public abstract class {_declaration.DeclarationName}Base : IWorkflowDeclaration
{{
    #region Internal 方法

    /// <summary>
    /// 声明工作流程上下文
    /// </summary>
    /// <param name=""declarator""></param>
    internal abstract void DeclareContext(IWorkflowContextDeclarator declarator);

    /// <summary>
    /// 声明工作流程
    /// </summary>
    /// <param name=""declarator""></param>
    internal abstract void DeclareWorkflow(IWorkflowDeclarator declarator);

    #endregion Internal 方法
}}

partial class {_declaration.DeclarationName} : {_declaration.DeclarationName}Base 
{{
}}
");
        yield return new($"{_declaration.DeclarationName}.DeclarationBase.g.cs", builder.ToString());
    }

    #endregion Public 方法
}
